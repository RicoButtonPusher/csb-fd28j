{"version":3,"sources":["layout.js","Seat.js","SubSection.js","Section.js","SeatPopup.js","MainStage.js","index.js"],"names":["getSubsectionWidth","subsection","rows","Object","keys","seats_by_rows","Math","max","apply","toConsumableArray","map","r","length","SUBSECTION_PADDING","getSubsectionHeight","getSectionWidth","section","subsections","reduce","sum","getColor","isBooked","isSelected","Seat","props","data","status","react_default","a","createElement","ReactKonvaCore","x","y","radius","SEAT_SIZE","fill","strokeWidth","onMouseEnter","e","target","_clearCache","onHover","name","getAbsolutePosition","container","getStage","style","cursor","onMouseLeave","onClick","onDeselect","onSelect","onTap","SubSection","_ref","width","onHoverSeat","onSelectSeat","onDeselectSeat","selectedSeatsIds","rowKey","rowIndex","row","Fragment","key","seat","seatIndex","src_Seat","indexOf","text","fontSize","_","toString","align","React","memo","height","containerRef","useRef","useEffect","current","cache","getLayer","batchDraw","lastSubsectionX","ref","stroke","cornerRadius","subWidth","pos","verticalAlign","Popup","position","seatId","onClose","element","node","parentNode","isClickedInside","window","addEventListener","removeEventListener","top","left","padding","borderRadius","boxShadow","zIndex","backgroundColor","MainStage","jsonData","url","_React$useState","useState","_React$useState2","slicedToArray","setData","fetch","then","res","json","useFetch","stageRef","_React$useState3","_React$useState4","scale","setScale","_React$useState5","_React$useState6","scaleToFit","setScaleToFit","_React$useState7","virtualWidth","_React$useState8","size","setSize","_React$useState9","_React$useState10","setVirtualWidth","_React$useState11","_React$useState12","setSelectedSeatsIds","_React$useState13","_React$useState14","popup","setPopup","newSize","offsetWidth","offsetHeight","clientRect","getClientRect","skipTransform","toggleScale","useCallback","lastSectionPosition","handleHover","handleSelect","newIds","concat","handleDeselect","ids","slice","splice","sections","maxSectionWidth","seats","draggable","dragBoundFunc","min","onDblTap","onDblClick","scaleX","scaleY","index","layout","offset","Section","SeatPopup","App","src_MainStage","console","log","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b28638e5.chunk.js","sourcesContent":["export const SEAT_SIZE = 10;\nexport const SEATS_DISTANCE = 15;\nexport const SUBSECTION_PADDING = 30;\n\nexport const SECTIONS_MARGIN = 10;\nexport const SECTION_TOP_PADDING = 40;\n\nexport const getSubsectionWidth = subsection => {\n  const rows = Object.keys(subsection.seats_by_rows);\n  const maxRows = Math.max(\n    ...rows.map(r => Object.keys(subsection.seats_by_rows[r]).length)\n  );\n  return SEATS_DISTANCE * maxRows + SUBSECTION_PADDING * 2;\n};\n\nexport const getSubsectionHeight = subsection => {\n  const rows = Object.keys(subsection.seats_by_rows);\n  return SEATS_DISTANCE * rows.length + SUBSECTION_PADDING * 2;\n};\n\nexport const getSectionWidth = section => {\n  const width = section.subsections.reduce((sum, subsection) => {\n    return sum + getSubsectionWidth(subsection);\n  }, 0);\n  return width;\n};\n\nexport const getSectionHeight = section => {\n  return (\n    Math.max(...section.subsections.map(getSubsectionHeight)) +\n    SECTION_TOP_PADDING\n  );\n};\n\nexport const getMaximimSectionWidth = sections => {\n  return Math.max(...sections.map(getSectionWidth));\n};\n","import React from \"react\";\nimport { Circle } from \"./react-konva\";\nimport { SEAT_SIZE } from \"./layout\";\n\nfunction getColor(isBooked, isSelected) {\n  if (isSelected) {\n    return \"red\";\n  } else if (isBooked) {\n    return \"lightgrey\";\n  } else {\n    return \"#1b728d\";\n  }\n}\n\nconst Seat = props => {\n  const isBooked = props.data.status === \"booked\";\n\n  return (\n    <Circle\n      x={props.x}\n      y={props.y}\n      radius={SEAT_SIZE / 2}\n      fill={getColor(isBooked, props.isSelected)}\n      strokeWidth={1}\n      onMouseEnter={e => {\n        e.target._clearCache();\n        props.onHover(props.data.name, e.target.getAbsolutePosition());\n        const container = e.target.getStage().container();\n        if (isBooked) {\n          container.style.cursor = \"not-allowed\";\n        } else {\n          container.style.cursor = \"pointer\";\n        }\n      }}\n      onMouseLeave={e => {\n        props.onHover(null);\n        const container = e.target.getStage().container();\n        container.style.cursor = \"\";\n      }}\n      onClick={e => {\n        if (isBooked) {\n          return;\n        }\n        if (props.isSelected) {\n          props.onDeselect(props.data.name);\n        } else {\n          props.onSelect(props.data.name);\n        }\n      }}\n      onTap={e => {\n        if (isBooked) {\n          return;\n        }\n        if (props.isSelected) {\n          props.onDeselect(props.data.name);\n        } else {\n          props.onSelect(props.data.name);\n        }\n      }}\n    />\n  );\n};\n\nexport default Seat;\n","import React from \"react\";\nimport { Group, Text } from \"./react-konva\";\nimport Seat from \"./Seat\";\n\nimport { SEATS_DISTANCE, SUBSECTION_PADDING, SEAT_SIZE } from \"./layout\";\n\nexport default ({\n  width,\n  x,\n  y,\n  data,\n  onHoverSeat,\n  onSelectSeat,\n  onDeselectSeat,\n  selectedSeatsIds\n}) => {\n  return (\n    <Group x={x} y={y}>\n      {Object.keys(data.seats_by_rows).map((rowKey, rowIndex) => {\n        const row = data.seats_by_rows[rowKey];\n        return (\n          <React.Fragment key={rowKey}>\n            {row.map((seat, seatIndex) => {\n              return (\n                <Seat\n                  key={seat.name}\n                  x={seatIndex * SEATS_DISTANCE + SUBSECTION_PADDING}\n                  y={rowIndex * SEATS_DISTANCE + SUBSECTION_PADDING}\n                  data={seat}\n                  onHover={onHoverSeat}\n                  onSelect={onSelectSeat}\n                  onDeselect={onDeselectSeat}\n                  isSelected={selectedSeatsIds.indexOf(seat.name) >= 0}\n                />\n              );\n            })}\n            <Text\n              text={rowKey}\n              x={SUBSECTION_PADDING - SEATS_DISTANCE}\n              y={rowIndex * SEATS_DISTANCE + SUBSECTION_PADDING - SEAT_SIZE / 2}\n              fontSize={SEAT_SIZE}\n              key={\"label-left\" + rowKey}\n            />\n          </React.Fragment>\n        );\n      })}\n      {data.seats_by_rows[1].map((_, seatIndex) => {\n        return (\n          <Text\n            text={(seatIndex + 1).toString()}\n            x={seatIndex * SEATS_DISTANCE + SUBSECTION_PADDING - 50}\n            width={100}\n            y={\n              Object.keys(data.seats_by_rows).length * SEATS_DISTANCE +\n              SUBSECTION_PADDING\n            }\n            key={\"label-bottom\" + seatIndex}\n            align=\"center\"\n          />\n        );\n      })}\n      <Text text={data.name} width={width} align=\"center\" y={-10} />\n    </Group>\n  );\n};\n","import React from 'react';\nimport { Rect, Group, Text } from './react-konva';\nimport SubSection from './SubSection';\n\nimport {\n  SECTION_TOP_PADDING,\n  getSectionWidth,\n  getSubsectionWidth\n} from './layout';\n\nexport default React.memo(\n  ({\n    section,\n    height,\n    x,\n    y,\n    onHoverSeat,\n    onSelectSeat,\n    onDeselectSeat,\n    selectedSeatsIds\n  }) => {\n    const containerRef = React.useRef();\n\n    // caching will boost rendering\n    // we just need to recache on some changes\n    React.useEffect(() => {\n      containerRef.current.cache();\n      containerRef.current.getLayer().batchDraw();\n    }, [section, selectedSeatsIds]);\n    const width = getSectionWidth(section);\n    let lastSubsectionX = 0;\n    return (\n      <Group y={y} x={x} ref={containerRef}>\n        <Rect\n          width={width}\n          height={height}\n          fill=\"white\"\n          strokeWidth={1}\n          stroke=\"lightgrey\"\n          cornerRadius={5}\n        />\n        {section.subsections.map(subsection => {\n          const subWidth = getSubsectionWidth(subsection);\n          const pos = lastSubsectionX;\n          lastSubsectionX += subWidth;\n\n          return (\n            <SubSection\n              x={pos}\n              y={SECTION_TOP_PADDING}\n              key={subsection.name}\n              data={subsection}\n              width={subWidth}\n              height={height}\n              onHoverSeat={onHoverSeat}\n              onSelectSeat={onSelectSeat}\n              onDeselectSeat={onDeselectSeat}\n              selectedSeatsIds={selectedSeatsIds}\n            />\n          );\n        })}\n        <Text\n          text={section.name}\n          height={SECTION_TOP_PADDING}\n          width={width}\n          align=\"center\"\n          verticalAlign=\"middle\"\n          fontSize={20}\n        />\n      </Group>\n    );\n  }\n);\n","import React from \"react\";\n\nconst isClickedInside = (e, element) => {\n  let node = e.target;\n  while (node) {\n    if (node === element) {\n      return true;\n    }\n    node = node.parentNode;\n  }\n  return false;\n};\n\nconst Popup = ({ position, seatId, onClose }) => {\n  const containerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const onClick = e => {\n      if (!isClickedInside(e, containerRef.current)) {\n        onClose();\n      }\n    };\n    window.addEventListener(\"click\", onClick);\n    return () => {\n      window.removeEventListener(\"click\", onClick);\n    };\n  }, []);\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: \"absolute\",\n        top: position.y + 20 + \"px\",\n        left: position.x + 20 + \"px\",\n        padding: \"10px\",\n        borderRadius: \"3px\",\n        boxShadow: \"0 0 5px grey\",\n        zIndex: 10,\n        backgroundColor: \"white\"\n      }}\n    >\n      <div>Seat {seatId}</div>\n      <div>Click on the seat to select</div>\n    </div>\n  );\n};\n\nexport default Popup;\n","import React from \"react\";\nimport { Stage, Layer } from \"./react-konva\";\nimport Section from \"./Section\";\nimport SeatPopup from \"./SeatPopup\";\n\nimport * as layout from \"./layout\";\n\nconst useFetch = url => {\n  const [data, setData] = React.useState(null);\n  React.useEffect(() => {\n    fetch(url)\n      .then(res => res.json())\n      .then(data => setData(data));\n  }, [url]);\n  return data;\n};\n\nconst MainStage = props => {\n  const jsonData = useFetch(\"./seats-data.json\");\n  const containerRef = React.useRef(null);\n  const stageRef = React.useRef(null);\n\n  const [scale, setScale] = React.useState(1);\n  const [scaleToFit, setScaleToFit] = React.useState(1);\n  const [size, setSize] = React.useState({\n    width: 1000,\n    height: 1000,\n    virtualWidth: 1000\n  });\n  const [virtualWidth, setVirtualWidth] = React.useState(1000);\n\n  const [selectedSeatsIds, setSelectedSeatsIds] = React.useState([]);\n\n  const [popup, setPopup] = React.useState({ seat: null });\n\n  // calculate available space for drawing\n  React.useEffect(() => {\n    const newSize = {\n      width: containerRef.current.offsetWidth,\n      height: containerRef.current.offsetHeight\n    };\n    if (newSize.width !== size.width || newSize.height !== size.height) {\n      setSize(newSize);\n    }\n  });\n\n  // calculate initial scale\n  React.useEffect(() => {\n    if (!stageRef.current) {\n      return;\n    }\n    const stage = stageRef.current;\n    const clientRect = stage.getClientRect({ skipTransform: true });\n\n    const scaleToFit = size.width / clientRect.width;\n    setScale(scaleToFit);\n    setScaleToFit(scaleToFit);\n    setVirtualWidth(clientRect.width);\n  }, [jsonData, size]);\n\n  // togle scale on double clicks or taps\n  const toggleScale = React.useCallback(() => {\n    if (scale === 1) {\n      setScale(scaleToFit);\n    } else {\n      setScale(1);\n    }\n  }, [scale, scaleToFit]);\n\n  let lastSectionPosition = 0;\n\n  const handleHover = React.useCallback((seat, pos) => {\n    setPopup({\n      seat: seat,\n      position: pos\n    });\n  }, []);\n\n  const handleSelect = React.useCallback(\n    seatId => {\n      const newIds = selectedSeatsIds.concat([seatId]);\n      setSelectedSeatsIds(newIds);\n    },\n    [selectedSeatsIds]\n  );\n\n  const handleDeselect = React.useCallback(\n    seatId => {\n      const ids = selectedSeatsIds.slice();\n      ids.splice(ids.indexOf(seatId), 1);\n      setSelectedSeatsIds(ids);\n    },\n    [selectedSeatsIds]\n  );\n\n  if (jsonData === null) {\n    return <div ref={containerRef}>Loading...</div>;\n  }\n\n  const maxSectionWidth = layout.getMaximimSectionWidth(\n    jsonData.seats.sections\n  );\n\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        backgroundColor: \"lightgrey\",\n        width: \"100vw\",\n        height: \"100vh\"\n      }}\n      ref={containerRef}\n    >\n      <Stage\n        ref={stageRef}\n        width={size.width}\n        height={size.height}\n        draggable\n        dragBoundFunc={pos => {\n          pos.x = Math.min(\n            size.width / 2,\n            Math.max(pos.x, -virtualWidth * scale + size.width / 2)\n          );\n          pos.y = Math.min(size.height / 2, Math.max(pos.y, -size.height / 2));\n          return pos;\n        }}\n        onDblTap={toggleScale}\n        onDblClick={toggleScale}\n        scaleX={scale}\n        scaleY={scale}\n      >\n        <Layer>\n          {jsonData.seats.sections.map((section, index) => {\n            const height = layout.getSectionHeight(section);\n            const position = lastSectionPosition + layout.SECTIONS_MARGIN;\n            lastSectionPosition = position + height;\n            const width = layout.getSectionWidth(section);\n\n            const offset = (maxSectionWidth - width) / 2;\n\n            return (\n              <Section\n                x={offset}\n                y={position}\n                height={height}\n                key={index}\n                section={section}\n                selectedSeatsIds={selectedSeatsIds}\n                onHoverSeat={handleHover}\n                onSelectSeat={handleSelect}\n                onDeselectSeat={handleDeselect}\n              />\n            );\n          })}\n        </Layer>\n      </Stage>\n      {/* draw popup as html */}\n      {popup.seat && (\n        <SeatPopup\n          position={popup.position}\n          seatId={popup.seat}\n          onClose={() => {\n            setPopup({ seat: null });\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MainStage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MainStage from \"./MainStage\";\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <MainStage\n      onSelectSeat={seatId => {\n        console.log(\"selected - \" + seatId);\n      }}\n    />\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}